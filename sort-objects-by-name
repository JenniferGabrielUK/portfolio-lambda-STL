#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class Person {
    friend std::ostream& operator<< (std::ostream& os, const Person& rhs);
private:
    std::string name;
    int age;
public:
    Person(std::string name = "Unknown", int age = 0) : name{ name }, age{ age } {}
    Person(const Person& p) : name(p.name), age(p.age) {}
    ~Person() = default;
    void set_name(std::string name) { this->name = name; }
    std::string get_name() { return this->name; }
    void set_age(int age) { this->age = age; }
};

std::ostream& operator<< (std::ostream& os, const Person& rhs) {
    os << rhs.name << " : " << rhs.age;
    return os;
}

void test1() {
    std::cout << "\nTest1=====================" << std::endl;
    Person person1("Jenny", 18);
    Person person2("Elizabeth", 34);
    Person person3("Gabriel", 21);
    std::vector<Person> people{ person1, person2, person3 };
    people.emplace_back(Person{ "Gandalf", 333 });
    for (auto p : people) {
        std::cout << p << " " << std::endl;
    }
    std::cout << std::endl << std::endl;
    std::sort(people.begin(), people.end(), [](Person lhs, Person rhs) {
        return lhs.get_name() < rhs.get_name();
        });
    for (auto p : people) {
        std::cout << p << " " << std::endl;
    }
    std::cout << std::endl << std::endl;
}

int main () {
  test1();
  return 0;
}
